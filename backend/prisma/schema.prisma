// This isyourPrismaschemafile,
//learnmoreaboutitinthedocs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}
datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id         Int       @id @default(autoincrement())
  firstName  String
  lastName   String
  bookings   Booking[]
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model VehicleType {
  id              Int       @id @default(autoincrement())
  name            String    @unique // "Hatchback", "SUV", "Sedan", "Cruiser", "Sports"
  numberOfWheels  Int       // 2 or 4
  vehicles        Vehicle[]
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model Vehicle {
  id            Int       @id @default(autoincrement())
  modelName     String    @unique // e.g., "Maruti Swift", "Honda Activa" - assuming each listed vehicle is unique
  vehicleTypeId Int
  vehicleType   VehicleType @relation(fields: [vehicleTypeId], references: [id])
  bookings      Booking[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Booking {
  id         Int       @id @default(autoincrement())
  userId     Int?      // Optional if you decide user creation is part of booking
  user       User?     @relation(fields: [userId], references: [id])
  firstName  String    // Storing directly as per form, can be linked to User if users are pre-registered
  lastName   String    // Storing directly as per form
  vehicleId  Int
  vehicle    Vehicle   @relation(fields: [vehicleId], references: [id])
  startDate  DateTime
  endDate    DateTime
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@index([vehicleId, startDate, endDate]) // For efficient overlap checking
}